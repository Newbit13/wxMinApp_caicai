{"version":3,"file":"tf-backend-webgl.min.js","sources":["../src/canvas_util.ts","../src/tex_util.ts","../src/webgl_util.ts","../src/flags_webgl.ts","../src/glsl_version.ts","../src/shader_compiler_util.ts","../src/decode_matrix_gpu.ts","../src/decode_matrix_packed_gpu.ts","../src/encode_float_gpu.ts","../src/encode_float_packed_gpu.ts","../src/encode_matrix_gpu.ts","../src/encode_matrix_packed_gpu.ts","../src/gpgpu_util.ts","../src/gpgpu_context.ts","../src/shader_compiler.ts","../src/gpgpu_math.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js","../src/kernel_utils/shared.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","../src/packing_util.ts","../src/pack_gpu.ts","../src/reshape_packed_gpu.ts","../src/texture_manager.ts","../src/unaryop_gpu.ts","../src/unaryop_packed_gpu.ts","../src/unpack_gpu.ts","../src/backend_webgl.ts","../src/webgl.ts","../src/base.ts","../src/binaryop_gpu.ts","../src/binaryop_packed_gpu.ts","../src/kernels/Identity.ts","../src/kernels/Complex.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernel_utils/kernel_funcs_utils.ts","../src/mulmat_packed_gpu.ts","../src/binaryop_complex_gpu.ts","../src/kernels/Multiply.ts","../src/kernels/Reshape.ts","../src/kernel_utils/reshape.ts","../src/mean_gpu.ts","../src/reduce_gpu.ts","../src/kernel_utils/reduce.ts","../src/transpose_gpu.ts","../src/transpose_packed_gpu.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Sum.ts","../src/kernels/Sum_impl.ts","../src/kernels/Transpose.ts","../src/kernels/BatchMatMul_impl.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Abs.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/Add.ts","../src/addn_gpu.ts","../src/addn_packed_gpu.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/argminmax_gpu.ts","../src/argminmax_packed_gpu.ts","../src/kernel_utils/arg_min_max.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/pool_gpu.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/avg_pool_backprop_gpu.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchMatMul.ts","../src/batchnorm_gpu.ts","../src/batchnorm_packed_gpu.ts","../src/kernels/BatchNorm.ts","../src/slice_gpu.ts","../src/slice_packed_gpu.ts","../src/kernels/Slice.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/NotEqual.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/kernel_utils/int.ts","../src/kernels/Ceil.ts","../src/clip_gpu.ts","../src/clip_packed_gpu.ts","../src/kernels/ClipByValue.ts","../src/complex_abs_gpu.ts","../src/kernels/ComplexAbs.ts","../src/concat_gpu.ts","../src/concat_packed_gpu.ts","../src/kernels/Imag.ts","../src/kernels/Concat_impl.ts","../src/kernels/Concat.ts","../src/conv_gpu.ts","../src/im2col_packed_gpu.ts","../src/kernels/Conv2D_impl.ts","../src/kernels/Conv2D.ts","../src/conv_backprop_gpu.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/crop_and_resize_gpu.ts","../src/kernels/CropAndResize.ts","../src/cumsum_gpu.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/depth_to_space_gpu.ts","../src/kernels/DepthToSpace.ts","../src/conv_gpu_depthwise.ts","../src/conv_packed_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/conv_backprop_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/diag_gpu.ts","../src/kernels/Diag.ts","../src/dilation_gpu.ts","../src/kernels/Dilation2D.ts","../src/kernels/Einsum.ts","../src/kernels/Elu.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/Exp.ts","../src/kernels/ExpandDims.ts","../src/kernels/Expm1.ts","../src/fft_gpu.ts","../src/kernels/FFT_impl.ts","../src/kernels/FFT.ts","../src/fill_gpu.ts","../src/kernels/Fill.ts","../src/kernels/FromPixels.ts","../src/flip_left_right_gpu.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/Floor.ts","../src/kernels/FloorDiv.ts","../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/gather_nd_gpu.ts","../src/kernels/GatherNd.ts","../src/gather_gpu.ts","../src/kernels/GatherV2.ts","../src/kernels/Greater.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/Less.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/lrn_gpu.ts","../src/lrn_packed_gpu.ts","../src/kernels/LRN.ts","../src/lrn_grad_gpu.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/max_pool_backprop_gpu.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Mean_impl.ts","../src/kernels/Min.ts","../src/kernels/Minimum.ts","../src/mirror_pad_gpu.ts","../src/mirror_pad_packed_gpu.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/multinomial_gpu.ts","../src/kernels/RealDiv.ts","../src/kernels/Sub.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/Neg.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/onehot_gpu.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/pad_gpu.ts","../src/pad_packed_gpu.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Prod.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/resize_bilinear_gpu.ts","../src/resize_bilinear_packed_gpu.ts","../src/kernels/ResizeBilinear.ts","../src/resize_bilinear_backprop_gpu.ts","../src/kernels/ResizeBilinearGrad.ts","../src/resize_nearest_neighbor_gpu.ts","../src/resize_nearest_neighbor_packed_gpu.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/resize_nearest_neighbor_backprop_gpu.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/reverse_gpu.ts","../src/reverse_packed_gpu.ts","../src/kernels/Reverse.ts","../src/rotate_gpu.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Rsqrt.ts","../src/scatter_gpu.ts","../src/kernels/ScatterNd.ts","../src/select_gpu.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseFillEmptyRows.ts","../src/kernels/SparseReshape.ts","../src/kernels/SparseSegmentMean.ts","../src/kernels/SparseSegmentSum.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Step.ts","../src/strided_slice_gpu.ts","../src/kernels/StridedSlice.ts","../src/kernels/StringNGrams.ts","../src/kernels/StringSplit.ts","../src/kernels/StringToHashBucketFast.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/tile_gpu.ts","../src/kernels/Tile.ts","../src/top_k_gpu.ts","../src/kernels/TopK.ts","../src/transform_gpu.ts","../src/kernels/Transform.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/segment_gpu.ts","../src/register_all_kernels.ts","../src/kernels/UnsortedSegmentSum.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    const newCtx = getWebGLRenderingContext(webGLVersion);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() && ENV.getBool('IS_CHROME') ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement|ImageBitmap));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          xRank === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne = program.packedInputs || xRank > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape}_${\n          uniformShape.length}_${isScalar}_${broadcastDims}_${\n          isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${\n          isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n//# sourceMappingURL=unary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n//# sourceMappingURL=Ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'cpu',\n    kernelFunc: equal\n};\n//# sourceMappingURL=Equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n//# sourceMappingURL=Exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n//# sourceMappingURL=Expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'cpu',\n    kernelFunc: greaterEqual\n};\n//# sourceMappingURL=GreaterEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'cpu',\n    kernelFunc: lessEqual\n};\n//# sourceMappingURL=LessEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n//# sourceMappingURL=Log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n//# sourceMappingURL=NotEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n//# sourceMappingURL=Rsqrt.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n    constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n        this.separator = util.encodeString(separator);\n        this.nGramWidths = nGramWidths;\n        this.leftPad = util.encodeString(leftPad);\n        this.rightPad = util.encodeString(rightPad);\n        this.padWidth = padWidth;\n        this.preserveShort = preserveShortSequences;\n    }\n    getPadWidth(nGramWidth) {\n        // Ngrams can be padded with either a fixed pad width or a dynamic pad\n        // width depending on the 'padWidth' arg, but in no case should the padding\n        // ever be wider than 'nGramWidth' - 1.\n        return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n    getNumNGrams(length, nGramWidth) {\n        const padWidth = this.getPadWidth(nGramWidth);\n        return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n    }\n    createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n        for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n            const padWidth = this.getPadWidth(nGramWidth);\n            const leftPadding = Math.max(0, padWidth - nGramIndex);\n            const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n            const numTokens = nGramWidth - (leftPadding + rightPadding);\n            const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n            // Calculate the total expected size of the nGram so we can reserve the\n            // correct amount of space in the string.\n            let nGramSize = 0;\n            // Size of the left padding.\n            nGramSize += leftPadding * this.leftPad.length;\n            // Size of the tokens.\n            for (let n = 0; n < numTokens; ++n) {\n                nGramSize += data[dataStartIndex + n].length;\n            }\n            // Size of the right padding.\n            nGramSize += rightPadding * this.rightPad.length;\n            // Size of the separators.\n            const numSeparators = leftPadding + rightPadding + numTokens - 1;\n            nGramSize += numSeparators * this.separator.length;\n            // Build the nGram.\n            output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n            const nGram = output[outputStartIndex + nGramIndex];\n            let nextNGramIndex = 0;\n            const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);\n            for (let n = 0; n < leftPadding; ++n) {\n                appendToNGram(this.leftPad);\n                appendToNGram(this.separator);\n            }\n            // Only output first numTokens - 1 pairs of data and separator\n            for (let n = 0; n < numTokens - 1; ++n) {\n                appendToNGram(data[dataStartIndex + n]);\n                appendToNGram(this.separator);\n            }\n            // Handle case when there are no tokens or no right padding as these\n            // can result in consecutive separators.\n            if (numTokens > 0) {\n                // If we have tokens, then output last and then pair each separator\n                // with the right padding that follows, to ensure nGram ends either with\n                // the token or with the right pad.\n                appendToNGram(data[dataStartIndex + numTokens - 1]);\n                for (let n = 0; n < rightPadding; ++n) {\n                    appendToNGram(this.separator);\n                    appendToNGram(this.rightPad);\n                }\n            }\n            else {\n                // If we don't have tokens, then the last item inserted into the nGram\n                // has been the separator from the left padding loop above. Hence,\n                // output right pad and separator and make sure to finish with a\n                // padding, not a separator.\n                for (let n = 0; n < rightPadding - 1; ++n) {\n                    appendToNGram(this.rightPad);\n                    appendToNGram(this.separator);\n                }\n                appendToNGram(this.rightPad);\n            }\n        }\n    }\n    // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n    compute(data, splits) {\n        // Validate that the splits are valid indices into data, only if there are\n        // splits specified.\n        const inputDataSize = data.length;\n        const splitsSize = splits.length;\n        if (splitsSize > 0) {\n            let prevSplit = splits[0];\n            if (prevSplit !== 0) {\n                throw new Error(`First split value must be 0, got ${prevSplit}`);\n            }\n            for (let i = 1; i < splitsSize; ++i) {\n                let validSplits = splits[i] >= prevSplit;\n                validSplits = validSplits && (splits[i] <= inputDataSize);\n                if (!validSplits) {\n                    throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n                }\n                prevSplit = splits[i];\n            }\n            if (prevSplit !== inputDataSize) {\n                throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n            }\n        }\n        const numBatchItems = splitsSize - 1;\n        const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n        // If there is no data or size, return an empty ragged tensor.\n        if (inputDataSize === 0 || splitsSize === 0) {\n            const empty = new Array(inputDataSize);\n            for (let i = 0; i <= numBatchItems; ++i) {\n                nGramsSplits[i] = 0;\n            }\n            return [empty, nGramsSplits];\n        }\n        nGramsSplits[0] = 0;\n        for (let i = 1; i <= numBatchItems; ++i) {\n            const length = splits[i] - splits[i - 1];\n            let numNGrams = 0;\n            this.nGramWidths.forEach((nGramWidth) => {\n                numNGrams += this.getNumNGrams(length, nGramWidth);\n            });\n            if (this.preserveShort && length > 0 && numNGrams === 0) {\n                numNGrams = 1;\n            }\n            nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n        }\n        const nGrams = new Array(nGramsSplits[numBatchItems]);\n        for (let i = 0; i < numBatchItems; ++i) {\n            const splitIndex = splits[i];\n            let outputStartIdx = nGramsSplits[i];\n            this.nGramWidths.forEach((nGramWidth) => {\n                const length = splits[i + 1] - splits[i];\n                const numNGrams = this.getNumNGrams(length, nGramWidth);\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n                outputStartIdx += numNGrams;\n            });\n            // If we're preserving short sequences, check to see if no sequence was\n            // generated by comparing the current output start idx to the original\n            // one (nGramSplitsdata). If no ngrams were generated, then they will\n            // be equal (since we increment outputStartIdx by numNGrams every\n            // time we create a set of ngrams.)\n            if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n                const dataLength = splits[i + 1] - splits[i];\n                // One legitimate reason to not have any ngrams when this.preserveShort\n                // is true is if the sequence itself is empty. In that case, move on.\n                if (dataLength === 0) {\n                    continue;\n                }\n                // We don't have to worry about dynamic padding sizes here: if padding\n                // was dynamic, every sequence would have had sufficient padding to\n                // generate at least one nGram.\n                const nGramWidth = dataLength + 2 * this.padWidth;\n                const numNGrams = 1;\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n            }\n        }\n        return [nGrams, nGramsSplits];\n    }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences)\n        .compute(data, dataSplits);\n}\n//# sourceMappingURL=StringNGrams_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty) {\n    if (!str.length) {\n        return [];\n    }\n    // When the delimiter is empty, the input is split into individual characters.\n    if (delimiters.length === 0) {\n        const result = new Array(str.length);\n        for (let i = 0; i < str.length; ++i) {\n            result[i] = str.subarray(i, i + 1);\n        }\n        return result;\n    }\n    // When there is one delimiter, the input is split only at that delimiter.\n    if (delimiters.length === 1) {\n        const delimiter = delimiters[0];\n        const result = [];\n        let f = str.indexOf(delimiter);\n        while (f !== -1) {\n            const token = str.subarray(0, f);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            str = str.subarray(f + 1);\n            f = str.indexOf(delimiter);\n        }\n        if (!skipEmpty || str.length !== 0) {\n            result.push(str);\n        }\n        return result;\n    }\n    // When there are multiple delimiters, the input is split at every instance\n    // one of the delimiters appears.\n    const result = [];\n    let tokenStart = 0;\n    for (let i = 0; i < str.length + 1; i++) {\n        if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n            const token = str.subarray(tokenStart, i);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            tokenStart = i + 1;\n        }\n    }\n    return result;\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n    const batchSize = input.length;\n    // Empty delimiter means split the input character by character.\n    const tokens = [];\n    let outputSize = 0;\n    let maxNumEntries = 0;\n    const numIndices = new Array(batchSize);\n    for (let i = 0; i < batchSize; ++i) {\n        const parts = split(input[i], delimiter, skipEmpty);\n        const nEntries = parts.length;\n        numIndices[i] = nEntries;\n        outputSize += nEntries;\n        maxNumEntries = Math.max(maxNumEntries, nEntries);\n        tokens.push(...parts);\n    }\n    const indices = util.getArrayFromDType('int32', outputSize * 2);\n    const values = new Array(outputSize);\n    const shape = [batchSize, maxNumEntries];\n    let c = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        for (let j = 0; j < numIndices[i]; ++j) {\n            // indices is a 2d tensor with shape of [outputSize, 2]\n            indices[c * 2] = i;\n            indices[c * 2 + 1] = j;\n            values[c] = tokens[c];\n            ++c;\n        }\n    }\n    return [indices, values, shape];\n}\n//# sourceMappingURL=StringSplit_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nconst comparePair = (a, b) => {\n    const valueDiff = b.value - a.value;\n    return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array, k, left = 0, right = array.length - 1) {\n    while (right > left) {\n        // Use select recursively to sample a smaller set of size s\n        // the arbitrary constants 600 and 0.5 are used in the original\n        // version to minimize execution time.\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const i = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n            const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n            select(array, k, newLeft, newRight);\n        }\n        // partition the elements between left and right around t\n        const t = array[k];\n        let i = left;\n        let j = right;\n        util.swap(array, left, k);\n        if (comparePair(array[right], t) > 0) {\n            util.swap(array, left, right);\n        }\n        while (i < j) {\n            util.swap(array, i, j);\n            i++;\n            j--;\n            while (comparePair(array[i], t) < 0) {\n                i = i + 1;\n            }\n            while (comparePair(array[j], t) > 0) {\n                j = j - 1;\n            }\n        }\n        if (comparePair(array[left], t) === 0) {\n            util.swap(array, left, j);\n        }\n        else {\n            j = j + 1;\n            util.swap(array, j, right);\n        }\n        // Adjust left and right towards the boundaries of the subset\n        // containing the (k - left + 1)th smallest element.\n        if (j <= k) {\n            left = j + 1;\n        }\n        if (k <= j) {\n            right = j - 1;\n        }\n    }\n}\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        let valAndInd = new Array(vals.length);\n        vals.forEach((value, index) => valAndInd[index] = { value, index });\n        if (k < valAndInd.length) {\n            select(valAndInd, k);\n            valAndInd = valAndInd.slice(0, k);\n        }\n        if (sorted) {\n            valAndInd.sort(comparePair);\n        }\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n//# sourceMappingURL=TopK_impl.js.map","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n//# sourceMappingURL=Concat_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n    const outBuf = buffer([numSlices, sliceSize], dtype);\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherNd_Impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        outBuf.values[i] = xBuf.values[originalIndex];\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherV2_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=LinSpace_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (Number.isNaN(value) ||\n                value > max) { // comparison with NaN always return false\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=Range_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n    const indicesCount = indicesShape[0];\n    const denseRows = denseShape[0];\n    const emptyRowIndicator = new Array(denseRows);\n    const reverseIndexMap = new Array(indicesCount);\n    const rank = indicesShape[1];\n    if (denseRows === 0) {\n        if (indicesCount !== 0) {\n            throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n        }\n        const outputIndices = util.getArrayFromDType(indicesDType, 0);\n        const outputValues = util.getArrayFromDType(valuesDType, 0);\n        return [\n            outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n        ];\n    }\n    let rowsAreOrdered = true;\n    let lastIndicesRow = 0;\n    const csrOffset = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n        // indices is a 2d tensor with shape of [N, rank]\n        const row = indices[i * rank];\n        if (row < 0) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n        }\n        if (row >= denseRows) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n        }\n        ++csrOffset[row];\n        rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n        lastIndicesRow = row;\n    }\n    let allRowsFull = true;\n    for (let row = 0; row < denseRows; ++row) {\n        // csrOffset here describes the number of elements in this dense row\n        const rowEmpty = (csrOffset[row] === 0);\n        emptyRowIndicator[row] = rowEmpty;\n        allRowsFull = allRowsFull && !rowEmpty;\n        // In filled version, each row has at least one element.\n        csrOffset[row] = Math.max(csrOffset[row], 1);\n        // Update csrOffset to represent the number of elements up to and\n        // including denseRows + 1:\n        //  csrOffset[0] == #{elements of row 0}\n        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n        //  ..\n        //  csrOffset[i] == starting index for elements in row i + 1.\n        if (row > 0) {\n            csrOffset[row] += csrOffset[row - 1];\n        }\n    }\n    if (allRowsFull && rowsAreOrdered) {\n        const outputIndices = indices;\n        const outputValues = values;\n        for (let i = 0; i < indicesCount; ++i) {\n            reverseIndexMap[i] = i;\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n    else {\n        const fullIndicesCount = csrOffset[denseRows - 1];\n        const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n        const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n        const filledCount = new Array(denseRows).fill(0);\n        // Fill in values for rows that are not missing\n        for (let i = 0; i < indicesCount; ++i) {\n            // indices is a 2d tensor with shape of [N, rank]\n            const row = indices[i * rank];\n            const offset = filledCount[row];\n            const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n            filledCount[row]++; // Increment the filled count for this row.\n            for (let j = 0; j < rank; ++j) {\n                // indices and outputIndices are 2d tensors with shape of [N, rank]\n                outputIndices[outputI * rank + j] = indices[i * rank + j];\n            }\n            outputValues[outputI] = values[i];\n            // We'll need this reverse index map to backprop correctly.\n            reverseIndexMap[i] = outputI;\n        }\n        // Fill in values for rows that are missing\n        for (let row = 0; row < denseRows; ++row) {\n            const rowCount = filledCount[row];\n            if (rowCount === 0) { // We haven't filled this row\n                const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n                // Remaining index values were set to zero already.\n                // Just need to set the row index in the right location.\n                // outputIndices is a 2d tensor with shape of [N, rank]\n                outputIndices[startingIndex * rank + 0] = row;\n                for (let col = 1; col < rank; ++col) {\n                    outputIndices[startingIndex * rank + col] = 0;\n                }\n                outputValues[startingIndex] = defaultValue;\n            }\n        }\n        return [\n            outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n}\n//# sourceMappingURL=SparseFillEmptyRows_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(`only one output dimension may be -1, not both ${unknownIndex} and ${d}`);\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(`size ${d} must be non-negative, not ${size}`);\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error('reshape cannot infer the missing ' +\n                'input size for an empty tensor unless all ' +\n                'specified input sizes are non-zero');\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(`Input to reshape is a tensor with ${denseSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n//# sourceMappingURL=SparseReshape_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {\n    const numIndices = indices.length;\n    if (numIndices !== segmentIds.length) {\n        throw new Error(`segmentIds and indices should have same size.`);\n    }\n    // Flatten the array to two dimensions\n    const inputFlat = [inputShape[0], input.length / inputShape[0]];\n    const numCol = inputFlat[1];\n    // Note that the current implementation assumes that segmentIds values are\n    // sorted.\n    const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n    const outputRows = lastSegmentIdPlusOne;\n    if (outputRows < 0) {\n        throw new Error(`segment ids must be >= 0`);\n    }\n    const outputShape = inputShape.slice();\n    outputShape[0] = outputRows;\n    const outputLength = outputShape.reduce((product, value) => product * value, 1);\n    // Output array is initialized with the value 0 by default.\n    const output = util.getArrayFromDType(inputDType, outputLength);\n    // Note that we do not initialize the output buffer with a default value, so\n    // we need to explicitly set missing indices to the default value.\n    if (numIndices === 0) {\n        if (outputRows > 0) {\n            output.fill(defaultValue);\n        }\n        return [output, outputShape];\n    }\n    if (outputRows <= 0) {\n        throw new Error(`segment ids must be >= 0`);\n    }\n    let start = 0, end = 1;\n    // Index from which the output is not initialized.\n    let uninitializedIndex = 0;\n    let outIndex = segmentIds[start];\n    while (true) {\n        // We initialize nextIndex to 0 to avoid may be uninitialized warning\n        let nextIndex = 0;\n        if (end < numIndices) {\n            nextIndex = segmentIds[end];\n            if (outIndex === nextIndex) {\n                ++end;\n                continue;\n            }\n            // We have a new segment here.  Verify that the segment ids are growing.\n            if (outIndex >= nextIndex) {\n                throw new Error(`segment ids are not increasing`);\n            }\n        }\n        if (outIndex < 0 || outIndex >= outputRows) {\n            throw new Error(`Segment id ${outIndex} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`);\n        }\n        // If there is a gap between two indices, we need to set that gap to the\n        // default value.\n        if (outIndex > uninitializedIndex) {\n            output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n        }\n        for (let i = start; i < end; ++i) {\n            const index = indices[i];\n            if (index < 0 || index >= inputFlat[0]) {\n                throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${inputFlat[0]})`);\n            }\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] += input[index * numCol + j];\n            }\n        }\n        if (isMean) {\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] /= end - start;\n            }\n        }\n        start = end;\n        ++end;\n        uninitializedIndex = outIndex + 1;\n        outIndex = nextIndex;\n        if (end > numIndices) {\n            break;\n        }\n    }\n    // Fill the gap at the end with the default value.\n    if (uninitializedIndex < outputRows) {\n        output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n    }\n    return [output, outputShape];\n}\n//# sourceMappingURL=SparseSegmentReduction_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n//# sourceMappingURL=StridedSlice_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function stringToHashBucketFastImpl(input, numBuckets) {\n    const output = util.getArrayFromDType('int32', input.length);\n    for (let i = 0; i < input.length; ++i) {\n        output[i] =\n            util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n    }\n    return output;\n}\n//# sourceMappingURL=StringToHashBucketFast_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n//# sourceMappingURL=Tile_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(\n        outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customUniformValues */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customUniformValues);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as {} as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], x.dtype);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({inputs: {x}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGrad3DConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n  const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n  if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n      !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n      !reshapeWillBeExpensive) {\n    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                         xShape[0] * xShape[2] * xShape[3];\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, targetShape, convInfo.inChannels]}\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  } else {\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  const xSqueezed =\n      reshape({inputs: {x}, backend, attrs: {shape: x.shape.slice(1)}});\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n\n  intermediates.push(xSqueezed);\n  intermediates.push(w2Row);\n\n  const im2ColProgram =\n      new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n  const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32');\n  const im2ColReshaped = reshape({\n    inputs: {x: im2Col},\n    backend,\n    attrs: {shape: [1, x2ColShape[0], x2ColShape[1]]}\n  });\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      im2ColReshaped.shape as [number, number, number],\n      w2Row.shape as [number, number, number],\n      [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias,\n      fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] = [im2ColReshaped, w2Row];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n\n  const outShape = isChannelsLast ?\n      [1, outHeight, outWidth, convInfo.outChannels] :\n      [1, convInfo.outChannels, outHeight, outWidth];\n  const out =\n      reshape({inputs: {x: product}, backend, attrs: {shape: outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumSumProgram} from '../cumsum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumsum shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n      }\n      mainLoop += `\n        xR = xRCorner + ${r * dilationHeight};\n        if (xR >=0 && xR < ${xNumRows}) {\n      `;\n\n      for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n        const colIndex = texelC * 2;\n        const c = colIndex * dilationWidth;\n\n        mainLoop += `\n          xC = xCCorner + ${c};\n          `;\n\n        if (strideWidth === 1) {\n          if (colIndex < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n              // This texel has been read in previous iteration if the dilation\n              // is 1.\n              if (dilationWidth === 1 && c > 0) {\n                mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                    colIndex}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n              }\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if (xC >= 0 && xC < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      colIndex}Ready == 0) {\n                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${colIndex}Ready = 1;\n                    }\n                    `;\n                }\n\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                  `;\n              } else {\n                // If dilation is 1 and padding is odd, we have already read the\n                // texel when constructing the previous x value. Here we can\n                // simply skip the texture read.\n                if (nextTexelOffset === 1) {\n                  mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n                } else {\n                  mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${xNumCols}) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n                }\n              }\n            }\n          }\n        } else {  // stride === 2\n          if (c < filterWidth) {\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n            // even, xC${colIndex +1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `\n            // vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols} && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${xNumCols}) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols} && xTexelC${\n                  colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.zw);\n                `;\n              }\n            }\n          }\n        }\n\n        // localize the dotProd accumulation within the loop, the theory is for\n        // GPU with limited cache, accumulate sum across large amount of\n        // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n        // 50 variables)\n        if (colIndex < filterWidth) {\n          mainLoop += `\n            wTexel = getW(${r}, ${c}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              wTexel = getW(${r}, ${c + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n          }\n        }\n      }\n      mainLoop += `\n        }\n      `;\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = `return exp(x);`;\nexport const exp = unaryKernelFunc(\n    {opSnippet: EXP, packedOpSnippet: EXP, cpuKernelImpl: expImplCPU});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n\n  const result = backend.runWebGLProgram(program, programInputs, 'float32');\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('int(getIndices(resRC.x, resRC.z))');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\nconst LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = `return log(1.0 + x);`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPoolGrad3DConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = `return -x;`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport const sigmoid = unaryKernelFunc({opSnippet: SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc({opSnippet: SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get($x.dataId);\n      const values = xTexData.values as TypedArray;\n      const xBuf = buffer($x.shape, $x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPoolGrad3DConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPoolGrad3DConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  LRNConfig,\n  LRNGradConfig,\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atan2Config,\n  atanConfig,\n  atanhConfig,\n  avgPool3DConfig,\n  avgPoolConfig,\n  avgPoolGrad3DConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexAbsConfig,\n  complexConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  maxConfig,\n  maxPool3DConfig,\n  maxPoolConfig,\n  maxPoolGrad3DConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maximumConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  relu6Config,\n  reluConfig,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.8.0';\nexport {version};\n"],"names":["PackingScheme","TextureUsage","PhysicalTextureType","contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","glany","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","downloadTextureFormat","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","requested","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","_a","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getLogicalCoordinatesFromFlatIndexByUniform","_","getFlatIndexFrom3D","registerFlag","get","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","outputShape","this","DENSE","texShape","glsl","userCode","shader_util.getLogicalCoordinatesFromFlatIndex","DOWNLOAD","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","mainLoop","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","glVersion","COLOR_BUFFER_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","Object","GPGPUContext","disposed","warn","outputTexture","finish","_this","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","gl2_1","sync_1","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","debug","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext_1","getQueryTimerExtensionWebGL2","query_1","createQuery","TIME_ELAPSED_EXT","ext","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","ext_2","repeatedTry","getQueryTime","queryTimerVersion","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","arr","linearSearchLastTrue","itemsToPoll","x","isDoneFn","resolveFn","push","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","getBroadcastDims","makeShader","inputsInfo","prefixSnippets","shapeInfo","logicalShape","isUniform","name","enableShapeUniforms","customUniforms","type","arrayIndex","outputSamplingSnippet","floatTextureSetOutputSnippet","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","coordsSnippet","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","packedInputs","floatTextureSampleSnippet","getFloatTextureSampleSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","coordsFromIndexSnippet","getOutput3DCoords","getOutput4DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","offset","getFlatOffsetUniformName","_b","tNumR","tNumC","getSamplerScalar","getUniformSampler","getSampler1D","texNumR_1","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","stride2Str","stride1Str","stride0Str","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","getUniformInfoFromShape","useSqueezePackedShape","useSqueezeShape","uniformShape","newInputInfo","JSON","parse","stringify","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","useShapeUniforms","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","backend_util","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","rsqrtImpl","sqrt","StringNGramsOp","[object Object]","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","value","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","getNumNGrams","nGrams","outputStartIdx","createNGrams","dataLength","delimiters","skipEmpty","subarray","delimiter","f","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","z","sd","sign","j","swap","addImplCPU","bincountImplCPU","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","bincountReduceImplCPU","xBuf","weightsBuf","binaryOutput","numCols","outBuf","ceilImplCPU","concatImplCPU","simplyConcat","vals","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImplCPU","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","dim","gatherV2ImplCPU","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImplCPU","start","stop","step","logImplCPU","maxImplCPU","reduceSize","Number","isNaN","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImplCPU","xShape","xDtype","minusOne","createScalarValue","notEqualImplCPU","prodImplCPU","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","rangeImplCPU","numElements","rsqrtImplCPU","simpleAbsImplCPU","resultValues","sliceImplCPU","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","sparseFillEmptyRowsImplCPU","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImplCPU","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","id","sparseSegmentReductionImplCPU","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","stridedSliceImplCPU","newLoc","stringNGramsImplCPU","dataSplits","compute","stringSplitImplCPU","batchSize","tokens","maxNumEntries","parts","nEntries","c","stringToHashBucketFastImplCPU","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImplCPU","tileImplCPU","reps","topKImplCPU","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","transposeImplCPU","perm","xRank","xSize","newStrides","uniqueImplCPU","axis","$axis","parseAxisParam","uniqueElements","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","undefined","uniqueIndex","keys","outputTmpShape","outputBuffer","uniqueElementIndex","getVecChannels","getChannels","channels","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","sourceCoords","coord","getSourceCoordsArr","getOutput","thisRC","gpgpu","TextureManager","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","newTexture","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture_1","shift","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","logicalTexType","deleteTexThreshold","deleteMatrixTexture","texList","texIndex","splice","logEnabled","total","freeRatio","round","tex","internalFormatForPhysicalTexType","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","opSnippet","CHECK_NAN_SNIPPET","ABS","CLONE","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","_super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","tslib_1.__extends","MathBackendWebGL","nextDataId","numDataIds","pendingDeletes","checkNumericalProblems","dataId","refCount","has","tensorInfo","disposeData","complexTensorInfos","UnaryOpPackedProgram","unary_op.CLONE","UnaryOpProgram","runWebGLProgram","readSync","disposeIntermediateTensorInfo","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers_1","read","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","all","ps","gl_1","dTypeVals","subscribers","delete","pendingDisposal","removeDataId","decodeString","webgl_util.canBeRepresented","tmpTarget","tmpData_1","vals_1","downloadMatrixFromPackedTexture","shouldUsePackedProgram","webgl_util.getShapeAs3D","EncodeFloatPackedProgram","EncodeFloatProgram","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","kernelMs_1","sum","ms","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startMs","endMs","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","releaseTexture","uploadToGPU","sizeThreshold","every","condition","condVals","dataSync","outInfo","compileAndRun","makeTensorFromDataId","shouldExecuteOnCPU","outValues","makeOutput","packedUnaryOp","unary_op.ABS","isString","encodedValues","write","UnpackProgram","PackProgram","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","ReshapePackedProgram","DecodeMatrixPackedProgram","DecodeMatrixProgram","outputDtype","customUniformValues","preventEagerUnpackingOfOutput","makeTensorInfo","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","uniformValues","unpackTensor","packTensor","webgl_util.isReshapeFree","savedInput","packedReshape","outputData","keyInputs","concat","hasOffset","xTexShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","constructor","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","variableNames","inShapeInfos","source","shader_compiler.makeShader","webGLProgram","infLoc","nanLoc","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","uniformLocations","inShapesLocations","inTexShapesLocations","varName","customUniformLocations","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniform1fv","setInputMatrixTexture","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","executeProgram","gpgpu_math.runProgram","info","endTimer","glFlushThreshold","time","lastGlFlushTime","unpacked","getBinary","dispose","HTMLCanvasElement","remove","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","scalar","floatPrecision","webgl_util.getTextureShapeFromLogicalShape","isByteArray","EncodeMatrixPackedProgram","EncodeMatrixProgram","tempDenseInputHandle","getTexture","encodedOutputTarget","outputTexData","acquireTexture","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","KernelBackend","forceHalfFloat","isBrowser","registerBackend","webgl","checkOutOfBounds","checkOutOfBoundsString","identity","args","backend","incRef","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","BinaryOpPackedProgram","BinaryOpProgram","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","_c","supportsComplex","aData","bData","complexOutput","decodedAVals","decodedBVals","_d","out","mapActivationToShaderProgram","activation","packed","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","MUL","multiply","realProgram","BinaryOpComplexProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","inputs_1","realPart","imagPart","multiplyConfig","Multiply","reshape","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","MeanProgram","ReduceProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","outputOrder","switchedOrder","nextColumn","getc","transposeImpl","TransposePackedProgram","TransposeProgram","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","_e","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","MatMulPackedProgram","$leakyreluAlpha","outReshaped","intermediates_1","_i","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","shapes","snippets","variable","operation","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","AddNPackedProgram","AddNProgram","allConfig","All","permutedX","a2D","anyConfig","Any","firstPass","compOp","indexSnippet","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","ArgMinMaxProgram","argReducePacked","ArgMinMaxPackedProgram","argMinMaxReduce","intermediateTensorInfos","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","CHECK_NAN_SNIPPET_BINARY","atan2Config","Atan2","atanh","atanhConfig","Atanh","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","Pool2DProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","Pool3DProgram","avgMultiplier","outHeight","outWidth","filterDepth","outDepth","avgPoolGrad3DConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","AvgPool3DBackpropProgram","avgPoolGradConfig","AvgPoolGrad","AvgPool2DBackpropProgram","batchMatMulConfig","BatchMatMul","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","BatchNormPackedProgram","BatchNormProgram","destSize","body","getCoords","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","assertParamsValid","SlicePackedProgram","SliceProgram","customValues","newTexData","assign","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf.zeros","floatX","hasEncodingLoss","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ClipPackedProgram","ClipProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","ComplexAbsProgram","programInputs","computeOutShape","offsets","lastIndex","lastShift","lastChannels","allChannels","getValueSnippet","shift_1","shiftedChannels","channelIdx","imagConfig","Imag","concatImpl","reals","imags","realConcated","imagConcated","result_1","r","runOnCpu","tensors2D_1","innerSize","inputsValShapes","outShape_1","finalOutShape","result_2","program_1","ConcatPackedProgram","tensors2D","ConcatProgram","reshapedResult","$inputs","assertParamsConsistent","concatConfig","Concat","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","itemsPerBlockRow","unrolled","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","xReshaped_1","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","xReshaped","conv2dWithIm2Row","x2ColShape","xSqueezed","w2Row","im2ColProgram","Im2ColPackedProgram","im2Col","im2ColReshaped","matmulProgram","intermediates_2","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DProgram","filterShape","conv2DBackpropFilterConfig","Conv2DBackpropFilter","Conv2DDerFilterProgram","conv2DBackpropInputConfig","Conv2DBackpropInput","Conv2DDerInputProgram","conv3DConfig","Conv3D","computeConv3DInfo","Conv3DProgram","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","Conv3DDerFilterProgram","conv3DBackpropInputConfig","Conv3DBackpropInputV2","Conv3DDerInputProgram","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CropAndResizeProgram","exclusive","reverse","val","idxString","getFinalCoord","cumsumConfig","Cumsum","permutation","permutedAxis","log2","CumSumProgram","prevResult","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","bufferSync","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","DepthToSpaceProgram","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","hasLeakyReluAlpha","xNumRows","xNumCols","channelMul","texelsAcross","texelC","colIndex","nextTexelOffset","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConvPacked2DProgram","DepthwiseConv2DProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","DepthwiseConv2DDerFilterProgram","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DepthwiseConv2DDerInputProgram","diagConfig","Diag","flat","DiagProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","Dilation2DProgram","einsumConfig","Einsum","equation","allDims","summedDims","idDims","checkEinsumDimSizes","path","steps","nSteps","numDimsRemaining","tensorsToDispose","idTerm","dimsToExpand","isIdentityPermutation","tensorsToDispose_1","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","EXP","expConfig","Exp","expandDims","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","component","inverse","innerDim","opString","exponentMultiplierSnippet","PI","resultDenominator","fftImpl","inputSize","innerDimensionSize","input2D","FFTProgram","complexOutputReshaped","fftConfig","FFT","inferDtype","FillProgram","fromPixels2DContext","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","FlipLeftRightProgram","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","drawImage","tempPixelHandle","FromPixelsPackedProgram","FromPixelsProgram","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","sliceDim","stridesType","strideString","gatherNdConfig","GatherNd","resultShape","flattenIndices","flattenX","outValue","GatherNDProgram","currentCoords","gatherV2","batchDims","parsedAxis","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","GatherProgram","gatherV2Config","GatherV2","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","radius","beta","powOperator","rad","maxD","basis","LRNConfig","LRN","depthRadius","LRNPackedProgram","LRNProgram","LRNGradConfig","LRNGrad","LRNGradProgram","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxImpl","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","maxPoolGrad3DConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","MaxPool3DBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","MaxPool2DBackpropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","poolOutput","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","paddings","mode","p","unpackedCoords","padSetup","cLimit","mirrorPadConfig","MirrorPad","MirrorPadPackedProgram","MirrorPadProgram","mod","modConfig","Mod","numOutcomes","numSamples","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","MultinomialProgram","NEG","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","selectedScores","onValue","offValue","oneHotConfig","OneHot","OneHotProgram","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","constantValue","componentSetup","paddingArea","padV2","PadPackedProgram","PadProgram","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","Prod","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","sourceFracIndexRC","effectiveInSize","effectiveOutSize","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearPackedProgram","ResizeBilinearProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeBilinearBackpropProgram","roundBase","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeighborPackedProgram","ResizeNearestNeighborProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ResizeNearestNeigborBackpropProgram","inCoords","getInCoord","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","ReversePackedProgram","ReverseProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","RotateProgram","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","scatterNdConfig","ScatterNd","updates","numUpdates","flattenShape","ScatterProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","SelectProgram","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","from","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","inputDtype","newCoords","outputAxis_1","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","some","StridedSliceProgram","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","tile","buf","TileProgram","tileConfig","Tile","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xtexData","xIsPacked","xUnPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","SwapProgram","NEGATIVE_INFINITY","prevIndices","len","mergeProgram","MergeProgram","prevIndices_1","prevValues","interpolation","fillMode","fillModeId","interpolationModeId","transformConfig","Transform","transforms","TransformProgram","uniqueConfig","Unique","unpackConfig","Unpack","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs_1","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","SegmentOpProgram","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":"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AA5BD,ifAeTC,EA5FQ,4DC0RpB,IC5OO,SD4OoB4/B,GApKW,CACpC5X,GACAK,GACAljB,GACAE,GACAG,GACAG,GACAK,GACAM,GACAW,GACAI,GACAyB,GACAG,GACAG,GACAG,GACAO,GACAJ,GACAO,GACAyC,GACAT,GACAmB,GACAK,GACAG,GACAS,GACA0B,GACAiB,GACAQ,GACAU,GACAE,GACAS,GACAtX,GACA2Z,GACAyC,GACAG,GACAX,GACAkB,GACAG,GACAP,GACAY,GACAG,GACAqB,GACAW,GACAS,GACAU,GACAqB,GACAG,GACAR,GACAW,GACAI,GACAI,GACAiB,GACAE,GACAG,GACAS,GACAG,GACAI,GACAG,GACAe,GACAK,GACAE,GACAI,GACAG,GACAE,GACAW,GACAE,GACAM,GACAiB,GACAG,GACAG,GACA1qB,GACA4qB,GACA/R,GACAkS,GACAG,GACAE,GACAvqB,GACA0qB,GACAG,GACAE,GACAK,GACAH,GACAM,GACAG,GACAG,GACAsB,GACAQ,GACAH,GACAK,GACAM,GACAM,GACAnB,GACAsB,GACAO,GACAG,GACAQ,GACAK,GACAqB,GACAluB,GACAyuB,GACAG,GACAU,GACAK,GACAxd,GACA8d,GACAM,GACAG,GACAU,GACAG,GACAt0B,GACAw0B,GACAG,GACAvf,GACA6a,GACA6E,GACAM,GACAH,GACA3xB,GACAyyB,GACAgB,GACAI,GACAI,GACAY,GACAO,GACAM,GACAG,GACAU,GACAW,GACAM,GACAG,GACAE,GACAE,GACAG,GACA7nB,GACAod,GACA4K,GACAE,GACAQ,GACAO,GACAK,GACAK,GACAE,GACAI,GACAM,GACAG,GACAI,GACAE,GACAK,GACAY,GACAG,GACAI,GACA7P,GACA5pB,GACA45B,GACAG,GACAK,GACAK,GACA0B,GACA/7B,GACAm8B,GACAE,GCvOoD,CACpDtkC,WAAY8kC,qBACZ5kC,YAAa,QACbC,oBArFiCP,GAK1B,IAAAxnB,WAAQynB,YAASrlB,UACjBzK,MAAGmY,eACHw8C,gBAED55C,EAAQ/a,EAAE5b,MAAM+E,OAEhB08C,EAAY,GAEd1qB,EAAO,EACLi1B,EAAcjnC,eAAaguB,mBAAmB,CAAChc,GAAOJ,GACxDshB,EAAYr8B,EACG,MAAfowC,IACF/T,EAAYrE,GAAU,CAAC3vB,OAAQ,CAACrI,KAAI8vB,UAASrlB,MAAO,CAACqQ,KAAMs1B,KAC3DvK,EAAU1lC,KAAKk8B,GACflhB,EAAOhS,eAAamuB,iBAAiB,EAAGvc,GAAO,IAGjD,IAAM/Y,EAAWmH,eAAa2wC,aAAa3R,gBACvC9L,EAAUj4C,MAAO+2B,EAAMw5C,GACrBjtD,EAASpjB,OAAKC,cAAc,CAAC83C,EAAUj4C,MAAM+2B,KAC7CmhB,EACFjI,GAAQ,CAAChsB,OAAQ,CAACrI,EAAGq8B,GAAYvM,UAASrlB,MAAO,CAACrmB,MAAO,EAAE,EAAGsjB,MAClEm+B,EAAU1lC,KAAKm8B,GAEf,IAAM04B,EAAcp9B,aAAW53B,EAAEhO,OAE3BijE,EACF,SAACj1D,EAAe00D,EAAiCv8C,EAChDnmB,EAAiB2iE,GAChB,IAAMt7C,EAAYrZ,EAAE5b,MAAM,GACpBsjB,EAAS1H,EAAE5b,MAAM,GACjB0wC,EACF3rB,eAAa2wC,aAAaob,8BACtBxtD,EAAQitD,GAEVtqE,EAAU,IAAI8qE,GADF,CAACrgC,aAAYptB,SAAQ2R,YAAWs7C,eACFD,GAC1CjiE,EAASq9B,EAAQ5I,cAAc78B,EAAS,CAAC2V,EAAGmY,GAAanmB,GAG/D,GAFA6zC,EAAU1lC,KAAK1N,GAEXA,EAAOrO,MAAM,KAAOuwE,EACtB,OAAOliE,EAET,IAAM2iE,EAAYtP,GAAM,CACtBh2B,UACArlB,MAAO,CAACsI,MAAO,EAAGC,KAAM2hD,EAAa1hD,KAAM,EAAGjhB,MAAO,aAEjDqjE,EAAWtD,GAAK,CACpB1pD,OAAQ,CAACrI,EAAGo1D,GACZtlC,UACArlB,MAAO,CAACyP,KAAM,CAACxS,EAASotB,MAQ1B,OALA+Q,EAAU1lC,KAAKi1D,GACfvvB,EAAU1lC,KAAKk1D,GAGXJ,EAAaxiE,EAAQiiE,EAAWW,EAAUrjE,EAAO2iE,IAOrD52B,EACF1J,GAAQ,CAAChsB,OAAQ,CAACrI,EAJFi1D,EAChB34B,EAAK,qBAAsBnkB,EAAY68C,EAAaL,IAGjB7kC,UAASrlB,MAAO,CAACrmB,MAAO4d,KAE3DlH,EAASijC,EACb,GAAmB,MAAfqS,EAAqB,CACvBvK,EAAU1lC,KAAK49B,GACf,IAAMjjB,EAAO3R,eAAaunC,uBAAuBN,GACjDt1C,EAASk9B,GAAU,CAAC3vB,OAAQ,CAACrI,EAAGlF,GAASg1B,UAASrlB,MAAO,CAACqQ,UAI5D,OADA+qB,EAAUh0C,SAAQ,SAAAC,GAAK,OAAAg+B,EAAQzN,8BAA8BvwB,MACtDgJ,ID4OP0pD,IAGyBpqB,aAAAA,KAAe,CAArC,IAAMk7B,UACTC,iBAAeD,oHEvVD"}